// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server_eRental.Models;

namespace server_eRental.Migrations
{
    [DbContext(typeof(eRentalContext))]
    [Migration("20250411082815_AddRoomToUser")]
    partial class AddRoomToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server_eRental.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("server_eRental.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("server_eRental.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("server_eRental.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<int?>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("transaction_id");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    b.HasKey("PaymentId");

                    b.HasIndex("RentalId");

                    b.HasIndex("VoucherId");

                    b.HasIndex(new[] { "TransactionId" }, "UQ__Payments__85C600AE7D830D90")
                        .IsUnique()
                        .HasFilter("[transaction_id] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("server_eRental.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("server_eRental.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rental_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.HasKey("RentalId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("server_eRental.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("server_eRental.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server_eRental.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_voucher_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RentalId")
                        .HasColumnType("int")
                        .HasColumnName("rental_id");

                    b.Property<DateTime?>("UsedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("used_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    b.HasKey("UserVoucherId");

                    b.HasIndex("RentalId");

                    b.HasIndex("VoucherId");

                    b.HasIndex(new[] { "UserId", "VoucherId", "RentalId" }, "UQ__UserVouc__3BD28395C61576D7")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL AND [voucher_id] IS NOT NULL AND [rental_id] IS NOT NULL");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("server_eRental.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucher_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int>("MaxUses")
                        .HasColumnType("int")
                        .HasColumnName("max_uses");

                    b.Property<decimal?>("MinOrderValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("min_order_value")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("UsedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("used_count")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("VoucherId");

                    b.HasIndex(new[] { "Code" }, "UQ__Vouchers__357D4CF912ADD2EB")
                        .IsUnique();

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("server_eRental.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wishlist_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("WishlistId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex(new[] { "UserId", "OrderId" }, "UQ__Wishlist__FDCE10D1CA5D4ED5")
                        .IsUnique()
                        .HasFilter("[user_id] IS NOT NULL AND [order_id] IS NOT NULL");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("server_eRental.Models.Order", b =>
                {
                    b.HasOne("server_eRental.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("server_eRental.Models.OrderProduct", b =>
                {
                    b.HasOne("server_eRental.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderProd__order__2A164134")
                        .IsRequired();

                    b.HasOne("server_eRental.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__OrderProd__produ__2B0A656D")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("server_eRental.Models.Payment", b =>
                {
                    b.HasOne("server_eRental.Models.Rental", "Rental")
                        .WithMany("Payments")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("FK__Payments__rental__73BA3083");

                    b.HasOne("server_eRental.Models.Voucher", "Voucher")
                        .WithMany("Payments")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK__Payments__vouche__74AE54BC");

                    b.Navigation("Rental");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("server_eRental.Models.Rental", b =>
                {
                    b.HasOne("server_eRental.Models.User", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Rentals__custome__5535A963")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("server_eRental.Models.Order", "Order")
                        .WithMany("Rentals")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Rentals_Orders");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("server_eRental.Models.Review", b =>
                {
                    b.HasOne("server_eRental.Models.Product", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Reviews__product__619B8048");

                    b.HasOne("server_eRental.Models.Order", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId1");

                    b.HasOne("server_eRental.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__user_id__60A75C0F");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_eRental.Models.UserVoucher", b =>
                {
                    b.HasOne("server_eRental.Models.Rental", "Rental")
                        .WithMany("UserVouchers")
                        .HasForeignKey("RentalId")
                        .HasConstraintName("FK__UserVouch__renta__7E37BEF6");

                    b.HasOne("server_eRental.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserVouch__user___7C4F7684")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("server_eRental.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK__UserVouch__vouch__7D439ABD")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Rental");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("server_eRental.Models.Wishlist", b =>
                {
                    b.HasOne("server_eRental.Models.Product", "Order")
                        .WithMany("Wishlists")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Wishlist__produc__68487DD7")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("server_eRental.Models.Order", null)
                        .WithMany("Wishlists")
                        .HasForeignKey("OrderId1");

                    b.HasOne("server_eRental.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Wishlist__user_i__6754599E")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_eRental.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("server_eRental.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("server_eRental.Models.Rental", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("server_eRental.Models.User", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");

                    b.Navigation("UserVouchers");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("server_eRental.Models.Voucher", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
